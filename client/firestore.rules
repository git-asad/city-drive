rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user documents
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Cars collection rules
    match /cars/{carId} {
      // Anyone can read available cars
      allow read: if resource.data.available == true;

      // Only authenticated users can read all cars
      allow read: if request.auth != null;

      // Only owners can create cars
      allow create: if request.auth != null &&
                       request.auth.token.role == 'owner' &&
                       request.auth.uid == resource.data.ownerId;

      // Only owners can update their own cars
      allow update: if request.auth != null &&
                       request.auth.token.role == 'owner' &&
                       request.auth.uid == resource.data.ownerId;

      // Only owners can delete their own cars
      allow delete: if request.auth != null &&
                       request.auth.token.role == 'owner' &&
                       request.auth.uid == resource.data.ownerId;
    }

    // Bookings collection rules
    match /bookings/{bookingId} {
      // Users can read their own bookings
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.userId ||
                      request.auth.token.role == 'owner');

      // Users can create bookings for themselves
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.userId;

      // Users can update their own bookings (for cancellation)
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.userId &&
                       // Only allow status updates to 'cancelled'
                       request.resource.data.diff(resource.data).affectedKeys() == ['status'].toSet() &&
                       request.resource.data.status == 'cancelled';

      // Owners can update booking status (for approval/rejection)
      allow update: if request.auth != null &&
                       request.auth.token.role == 'owner' &&
                       request.resource.data.diff(resource.data).affectedKeys() == ['status'].toSet();

      // Only users can delete their own pending bookings
      allow delete: if request.auth != null &&
                       request.auth.uid == resource.data.userId &&
                       resource.data.status == 'pending';
    }

    // Reviews collection rules
    match /reviews/{reviewId} {
      // Anyone can read active reviews
      allow read: if resource.data.isActive == true;

      // Authenticated users can read all reviews
      allow read: if request.auth != null;

      // Authenticated users can create reviews
      allow create: if request.auth != null &&
                       request.auth.uid == resource.data.userId;

      // Users can update their own reviews
      allow update: if request.auth != null &&
                       request.auth.uid == resource.data.userId;

      // Only admins can delete reviews (soft delete by setting isActive to false)
      allow update: if request.auth != null &&
                       request.auth.token.role == 'admin';
    }

    // Contact messages collection rules
    match /contacts/{contactId} {
      // Only authenticated users can create contact messages
      allow create: if request.auth != null;

      // Only admins can read contact messages
      allow read: if request.auth != null &&
                     request.auth.token.role == 'admin';
    }

    // Newsletter subscriptions
    match /newsletter/{subscriptionId} {
      // Anyone can subscribe
      allow create: if true;

      // Only admins can read subscriptions
      allow read: if request.auth != null &&
                  request.auth.token.role == 'admin';

      // Users can unsubscribe themselves
      allow delete: if request.auth != null &&
                    request.auth.uid == resource.data.userId;
    }

    // Revenue collection rules
    match /revenue/{revenueId} {
      // Only owners can read their own revenue records
      allow read: if request.auth != null &&
                  request.auth.token.role == 'owner' &&
                  request.auth.uid == resource.data.ownerId;

      // Only system can create revenue records (through booking acceptance)
      allow create: if request.auth != null &&
                    request.auth.token.role == 'owner';

      // No direct updates or deletes allowed - revenue is immutable once created
      allow update: if false;
      allow delete: if false;
    }
  }
}